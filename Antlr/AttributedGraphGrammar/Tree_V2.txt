module AndTree {

	// Defining Node Types 
	define AND[bit : int , connected : boolean , CL : boolean , NL : boolean ](IN1 : in , IN2  : in , OUT1 : out );
	define Input[level : int ](OUT1 : out ); 
	
	// Defining Host Graph 
	AndTree {}
	
	// Defining Rules
	
	rule AND_Init {
		sub {}
		add U1 Input [level = 0]; 
		add U2 Input [level = 0]; 
		add U3 AND [connected = False , CL = True , NL = False ](U1.OUT1 -> IN1, U2.OUT1 -> IN2);
		
	}
	
	
	rule Main_Rule {
		sub {
			U1 AND[connected = False , CL = True , NL = False ](); 
			U2 AND[connected = False , CL = True , NL = False ](); 
		}
		add U3 AND[connected = False , CL = False , NL = True ](IN1 = U1.OUT1 , IN2 = U2.OUT1); 
	}
	
	rule Change_Level {
		sub {
			U1 AND[connected = False , CL = False , NL = True ](); 
		}
		U1[CL = True , NL = False ];
	}
	
	// Defining Rule Sequences 
	rulesequence {
		subsequence : 8 {
			AND_Init : 1;
		}
		subsequence : * {
			Main_Rule : *;
			Change_Level : *;
		}
	}
}



