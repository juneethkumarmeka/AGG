# Generated from .\AGL.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\64")
        buf.write("\u018d\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13")
        buf.write("\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3")
        buf.write("\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u011a")
        buf.write("\n%\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3)\3")
        buf.write(")\3)\3)\3*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write(",\3,\3,\3,\3,\3,\3-\3-\6-\u0145\n-\r-\16-\u0146\3-\6-")
        buf.write("\u014a\n-\r-\16-\u014b\5-\u014e\n-\3.\3.\7.\u0152\n.\f")
        buf.write(".\16.\u0155\13.\3.\3.\3.\7.\u015a\n.\f.\16.\u015d\13.")
        buf.write("\3.\5.\u0160\n.\3/\6/\u0163\n/\r/\16/\u0164\3\60\6\60")
        buf.write("\u0168\n\60\r\60\16\60\u0169\3\60\3\60\3\61\3\61\3\62")
        buf.write("\3\62\3\63\3\63\3\63\3\63\7\63\u0176\n\63\f\63\16\63\u0179")
        buf.write("\13\63\3\63\5\63\u017c\n\63\3\63\3\63\3\63\3\63\3\63\7")
        buf.write("\63\u0183\n\63\f\63\16\63\u0186\13\63\3\63\3\63\5\63\u018a")
        buf.write("\n\63\3\63\3\63\3\u0184\2\64\3\3\5\4\7\5\t\6\13\7\r\b")
        buf.write("\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22")
        buf.write("#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35")
        buf.write("9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62")
        buf.write("c\63e\64\3\2\t\5\2C\\aac|\6\2\62;C\\aac|\4\2))^^\4\2$")
        buf.write("$^^\3\2\62;\5\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u0199\2")
        buf.write("\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3")
        buf.write("\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2")
        buf.write("\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2")
        buf.write("\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%")
        buf.write("\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\3g\3")
        buf.write("\2\2\2\5n\3\2\2\2\7p\3\2\2\2\tr\3\2\2\2\13w\3\2\2\2\r")
        buf.write("\u0081\3\2\2\2\17\u008b\3\2\2\2\21\u0099\3\2\2\2\23\u00a7")
        buf.write("\3\2\2\2\25\u00a9\3\2\2\2\27\u00ab\3\2\2\2\31\u00ad\3")
        buf.write("\2\2\2\33\u00af\3\2\2\2\35\u00b4\3\2\2\2\37\u00b8\3\2")
        buf.write("\2\2!\u00bc\3\2\2\2#\u00bf\3\2\2\2%\u00c1\3\2\2\2\'\u00c4")
        buf.write("\3\2\2\2)\u00c7\3\2\2\2+\u00c9\3\2\2\2-\u00cb\3\2\2\2")
        buf.write("/\u00cf\3\2\2\2\61\u00d3\3\2\2\2\63\u00e0\3\2\2\2\65\u00ec")
        buf.write("\3\2\2\2\67\u00ee\3\2\2\29\u00f0\3\2\2\2;\u00f2\3\2\2")
        buf.write("\2=\u00f4\3\2\2\2?\u00f6\3\2\2\2A\u00f8\3\2\2\2C\u00fb")
        buf.write("\3\2\2\2E\u00fe\3\2\2\2G\u0101\3\2\2\2I\u0119\3\2\2\2")
        buf.write("K\u011b\3\2\2\2M\u0122\3\2\2\2O\u0125\3\2\2\2Q\u0129\3")
        buf.write("\2\2\2S\u012d\3\2\2\2U\u0134\3\2\2\2W\u013c\3\2\2\2Y\u014d")
        buf.write("\3\2\2\2[\u015f\3\2\2\2]\u0162\3\2\2\2_\u0167\3\2\2\2")
        buf.write("a\u016d\3\2\2\2c\u016f\3\2\2\2e\u0189\3\2\2\2gh\7o\2\2")
        buf.write("hi\7q\2\2ij\7f\2\2jk\7w\2\2kl\7n\2\2lm\7g\2\2m\4\3\2\2")
        buf.write("\2no\7}\2\2o\6\3\2\2\2pq\7\177\2\2q\b\3\2\2\2rs\7v\2\2")
        buf.write("st\7{\2\2tu\7r\2\2uv\7g\2\2v\n\3\2\2\2wx\7U\2\2xy\7{\2")
        buf.write("\2yz\7o\2\2z{\7o\2\2{|\7g\2\2|}\7v\2\2}~\7t\2\2~\177\7")
        buf.write("k\2\2\177\u0080\7e\2\2\u0080\f\3\2\2\2\u0081\u0082\7u")
        buf.write("\2\2\u0082\u0083\7{\2\2\u0083\u0084\7o\2\2\u0084\u0085")
        buf.write("\7o\2\2\u0085\u0086\7g\2\2\u0086\u0087\7v\2\2\u0087\u0088")
        buf.write("\7t\2\2\u0088\u0089\7k\2\2\u0089\u008a\7e\2\2\u008a\16")
        buf.write("\3\2\2\2\u008b\u008c\7p\2\2\u008c\u008d\7q\2\2\u008d\u008e")
        buf.write("\7p\2\2\u008e\u008f\7/\2\2\u008f\u0090\7u\2\2\u0090\u0091")
        buf.write("\7{\2\2\u0091\u0092\7o\2\2\u0092\u0093\7o\2\2\u0093\u0094")
        buf.write("\7g\2\2\u0094\u0095\7v\2\2\u0095\u0096\7t\2\2\u0096\u0097")
        buf.write("\7k\2\2\u0097\u0098\7e\2\2\u0098\20\3\2\2\2\u0099\u009a")
        buf.write("\7P\2\2\u009a\u009b\7q\2\2\u009b\u009c\7p\2\2\u009c\u009d")
        buf.write("\7/\2\2\u009d\u009e\7U\2\2\u009e\u009f\7{\2\2\u009f\u00a0")
        buf.write("\7o\2\2\u00a0\u00a1\7o\2\2\u00a1\u00a2\7g\2\2\u00a2\u00a3")
        buf.write("\7v\2\2\u00a3\u00a4\7t\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6")
        buf.write("\7e\2\2\u00a6\22\3\2\2\2\u00a7\u00a8\7]\2\2\u00a8\24\3")
        buf.write("\2\2\2\u00a9\u00aa\7_\2\2\u00aa\26\3\2\2\2\u00ab\u00ac")
        buf.write("\7*\2\2\u00ac\30\3\2\2\2\u00ad\u00ae\7+\2\2\u00ae\32\3")
        buf.write("\2\2\2\u00af\u00b0\7t\2\2\u00b0\u00b1\7w\2\2\u00b1\u00b2")
        buf.write("\7n\2\2\u00b2\u00b3\7g\2\2\u00b3\34\3\2\2\2\u00b4\u00b5")
        buf.write("\7u\2\2\u00b5\u00b6\7w\2\2\u00b6\u00b7\7d\2\2\u00b7\36")
        buf.write("\3\2\2\2\u00b8\u00b9\7p\2\2\u00b9\u00ba\7c\2\2\u00ba\u00bb")
        buf.write("\7e\2\2\u00bb \3\2\2\2\u00bc\u00bd\7c\2\2\u00bd\u00be")
        buf.write("\7e\2\2\u00be\"\3\2\2\2\u00bf\u00c0\7?\2\2\u00c0$\3\2")
        buf.write("\2\2\u00c1\u00c2\7?\2\2\u00c2\u00c3\7?\2\2\u00c3&\3\2")
        buf.write("\2\2\u00c4\u00c5\7/\2\2\u00c5\u00c6\7@\2\2\u00c6(\3\2")
        buf.write("\2\2\u00c7\u00c8\7=\2\2\u00c8*\3\2\2\2\u00c9\u00ca\7\60")
        buf.write("\2\2\u00ca,\3\2\2\2\u00cb\u00cc\7c\2\2\u00cc\u00cd\7f")
        buf.write("\2\2\u00cd\u00ce\7f\2\2\u00ce.\3\2\2\2\u00cf\u00d0\7f")
        buf.write("\2\2\u00d0\u00d1\7g\2\2\u00d1\u00d2\7n\2\2\u00d2\60\3")
        buf.write("\2\2\2\u00d3\u00d4\7t\2\2\u00d4\u00d5\7w\2\2\u00d5\u00d6")
        buf.write("\7n\2\2\u00d6\u00d7\7g\2\2\u00d7\u00d8\7u\2\2\u00d8\u00d9")
        buf.write("\7g\2\2\u00d9\u00da\7s\2\2\u00da\u00db\7w\2\2\u00db\u00dc")
        buf.write("\7g\2\2\u00dc\u00dd\7p\2\2\u00dd\u00de\7e\2\2\u00de\u00df")
        buf.write("\7g\2\2\u00df\62\3\2\2\2\u00e0\u00e1\7u\2\2\u00e1\u00e2")
        buf.write("\7w\2\2\u00e2\u00e3\7d\2\2\u00e3\u00e4\7u\2\2\u00e4\u00e5")
        buf.write("\7g\2\2\u00e5\u00e6\7s\2\2\u00e6\u00e7\7w\2\2\u00e7\u00e8")
        buf.write("\7g\2\2\u00e8\u00e9\7p\2\2\u00e9\u00ea\7e\2\2\u00ea\u00eb")
        buf.write("\7g\2\2\u00eb\64\3\2\2\2\u00ec\u00ed\7,\2\2\u00ed\66\3")
        buf.write("\2\2\2\u00ee\u00ef\7-\2\2\u00ef8\3\2\2\2\u00f0\u00f1\7")
        buf.write("/\2\2\u00f1:\3\2\2\2\u00f2\u00f3\7\61\2\2\u00f3<\3\2\2")
        buf.write("\2\u00f4\u00f5\7>\2\2\u00f5>\3\2\2\2\u00f6\u00f7\7@\2")
        buf.write("\2\u00f7@\3\2\2\2\u00f8\u00f9\7>\2\2\u00f9\u00fa\7?\2")
        buf.write("\2\u00faB\3\2\2\2\u00fb\u00fc\7@\2\2\u00fc\u00fd\7?\2")
        buf.write("\2\u00fdD\3\2\2\2\u00fe\u00ff\7#\2\2\u00ff\u0100\7?\2")
        buf.write("\2\u0100F\3\2\2\2\u0101\u0102\7d\2\2\u0102\u0103\7k\2")
        buf.write("\2\u0103\u0104\7p\2\2\u0104\u0105\7u\2\2\u0105\u0106\7")
        buf.write("v\2\2\u0106\u0107\7t\2\2\u0107\u0108\7\64\2\2\u0108\u0109")
        buf.write("\7k\2\2\u0109\u010a\7p\2\2\u010a\u010b\7v\2\2\u010b\u010c")
        buf.write("\3\2\2\2\u010c\u010d\7*\2\2\u010d\u010e\5Y-\2\u010e\u010f")
        buf.write("\7+\2\2\u010fH\3\2\2\2\u0110\u0111\7V\2\2\u0111\u0112")
        buf.write("\7t\2\2\u0112\u0113\7w\2\2\u0113\u011a\7g\2\2\u0114\u0115")
        buf.write("\7H\2\2\u0115\u0116\7c\2\2\u0116\u0117\7n\2\2\u0117\u0118")
        buf.write("\7u\2\2\u0118\u011a\7g\2\2\u0119\u0110\3\2\2\2\u0119\u0114")
        buf.write("\3\2\2\2\u011aJ\3\2\2\2\u011b\u011c\7f\2\2\u011c\u011d")
        buf.write("\7g\2\2\u011d\u011e\7h\2\2\u011e\u011f\7k\2\2\u011f\u0120")
        buf.write("\7p\2\2\u0120\u0121\7g\2\2\u0121L\3\2\2\2\u0122\u0123")
        buf.write("\7k\2\2\u0123\u0124\7p\2\2\u0124N\3\2\2\2\u0125\u0126")
        buf.write("\7q\2\2\u0126\u0127\7w\2\2\u0127\u0128\7v\2\2\u0128P\3")
        buf.write("\2\2\2\u0129\u012a\7k\2\2\u012a\u012b\7p\2\2\u012b\u012c")
        buf.write("\7v\2\2\u012cR\3\2\2\2\u012d\u012e\7U\2\2\u012e\u012f")
        buf.write("\7v\2\2\u012f\u0130\7t\2\2\u0130\u0131\7k\2\2\u0131\u0132")
        buf.write("\7p\2\2\u0132\u0133\7i\2\2\u0133T\3\2\2\2\u0134\u0135")
        buf.write("\7d\2\2\u0135\u0136\7q\2\2\u0136\u0137\7q\2\2\u0137\u0138")
        buf.write("\7n\2\2\u0138\u0139\7g\2\2\u0139\u013a\7c\2\2\u013a\u013b")
        buf.write("\7p\2\2\u013bV\3\2\2\2\u013c\u013d\7h\2\2\u013d\u013e")
        buf.write("\7n\2\2\u013e\u013f\7q\2\2\u013f\u0140\7c\2\2\u0140\u0141")
        buf.write("\7v\2\2\u0141X\3\2\2\2\u0142\u0144\t\2\2\2\u0143\u0145")
        buf.write("\t\3\2\2\u0144\u0143\3\2\2\2\u0145\u0146\3\2\2\2\u0146")
        buf.write("\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u014e\3\2\2\2")
        buf.write("\u0148\u014a\t\2\2\2\u0149\u0148\3\2\2\2\u014a\u014b\3")
        buf.write("\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014e")
        buf.write("\3\2\2\2\u014d\u0142\3\2\2\2\u014d\u0149\3\2\2\2\u014e")
        buf.write("Z\3\2\2\2\u014f\u0153\7)\2\2\u0150\u0152\n\4\2\2\u0151")
        buf.write("\u0150\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2")
        buf.write("\u0153\u0154\3\2\2\2\u0154\u0156\3\2\2\2\u0155\u0153\3")
        buf.write("\2\2\2\u0156\u0160\7)\2\2\u0157\u015b\7$\2\2\u0158\u015a")
        buf.write("\n\5\2\2\u0159\u0158\3\2\2\2\u015a\u015d\3\2\2\2\u015b")
        buf.write("\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015e\3\2\2\2")
        buf.write("\u015d\u015b\3\2\2\2\u015e\u0160\7$\2\2\u015f\u014f\3")
        buf.write("\2\2\2\u015f\u0157\3\2\2\2\u0160\\\3\2\2\2\u0161\u0163")
        buf.write("\t\6\2\2\u0162\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u0162\3\2\2\2\u0164\u0165\3\2\2\2\u0165^\3\2\2\2\u0166")
        buf.write("\u0168\t\7\2\2\u0167\u0166\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016b\3")
        buf.write("\2\2\2\u016b\u016c\b\60\2\2\u016c`\3\2\2\2\u016d\u016e")
        buf.write("\7<\2\2\u016eb\3\2\2\2\u016f\u0170\7.\2\2\u0170d\3\2\2")
        buf.write("\2\u0171\u0172\7\61\2\2\u0172\u0173\7\61\2\2\u0173\u0177")
        buf.write("\3\2\2\2\u0174\u0176\n\b\2\2\u0175\u0174\3\2\2\2\u0176")
        buf.write("\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2")
        buf.write("\u0178\u017b\3\2\2\2\u0179\u0177\3\2\2\2\u017a\u017c\7")
        buf.write("\17\2\2\u017b\u017a\3\2\2\2\u017b\u017c\3\2\2\2\u017c")
        buf.write("\u017d\3\2\2\2\u017d\u018a\7\f\2\2\u017e\u017f\7\61\2")
        buf.write("\2\u017f\u0180\7,\2\2\u0180\u0184\3\2\2\2\u0181\u0183")
        buf.write("\13\2\2\2\u0182\u0181\3\2\2\2\u0183\u0186\3\2\2\2\u0184")
        buf.write("\u0185\3\2\2\2\u0184\u0182\3\2\2\2\u0185\u0187\3\2\2\2")
        buf.write("\u0186\u0184\3\2\2\2\u0187\u0188\7,\2\2\u0188\u018a\7")
        buf.write("\61\2\2\u0189\u0171\3\2\2\2\u0189\u017e\3\2\2\2\u018a")
        buf.write("\u018b\3\2\2\2\u018b\u018c\b\63\2\2\u018cf\3\2\2\2\20")
        buf.write("\2\u0119\u0146\u014b\u014d\u0153\u015b\u015f\u0164\u0169")
        buf.write("\u0177\u017b\u0184\u0189\3\b\2\2")
        return buf.getvalue()


class AGLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    Binstr2int = 35
    Boolean = 36
    DEFINE = 37
    IN = 38
    OUT = 39
    INT = 40
    STRING = 41
    BOOLEAN = 42
    FLOAT = 43
    ID = 44
    STRING_Note = 45
    NUM = 46
    WS = 47
    COLON = 48
    COMMA = 49
    COMMENT = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'module'", "'{'", "'}'", "'type'", "'Symmetric'", "'symmetric'", 
            "'non-symmetric'", "'Non-Symmetric'", "'['", "']'", "'('", "')'", 
            "'rule'", "'sub'", "'nac'", "'ac'", "'='", "'=='", "'->'", "';'", 
            "'.'", "'add'", "'del'", "'rulesequence'", "'subsequence'", 
            "'*'", "'+'", "'-'", "'/'", "'<'", "'>'", "'<='", "'>='", "'!='", 
            "'define'", "'in'", "'out'", "'int'", "'String'", "'boolean'", 
            "'float'", "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "Binstr2int", "Boolean", "DEFINE", "IN", "OUT", "INT", "STRING", 
            "BOOLEAN", "FLOAT", "ID", "STRING_Note", "NUM", "WS", "COLON", 
            "COMMA", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "Binstr2int", "Boolean", "DEFINE", "IN", 
                  "OUT", "INT", "STRING", "BOOLEAN", "FLOAT", "ID", "STRING_Note", 
                  "NUM", "WS", "COLON", "COMMA", "COMMENT" ]

    grammarFileName = "AGL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


