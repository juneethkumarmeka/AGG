# Generated from .\AGL.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u0173\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3")
        buf.write("\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3")
        buf.write("%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(")
        buf.write("\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*\3*\6*\u012b")
        buf.write("\n*\r*\16*\u012c\3*\6*\u0130\n*\r*\16*\u0131\5*\u0134")
        buf.write("\n*\3+\3+\7+\u0138\n+\f+\16+\u013b\13+\3+\3+\3+\7+\u0140")
        buf.write("\n+\f+\16+\u0143\13+\3+\5+\u0146\n+\3,\6,\u0149\n,\r,")
        buf.write("\16,\u014a\3-\6-\u014e\n-\r-\16-\u014f\3-\3-\3.\3.\3/")
        buf.write("\3/\3\60\3\60\3\60\3\60\7\60\u015c\n\60\f\60\16\60\u015f")
        buf.write("\13\60\3\60\5\60\u0162\n\60\3\60\3\60\3\60\3\60\3\60\7")
        buf.write("\60\u0169\n\60\f\60\16\60\u016c\13\60\3\60\3\60\5\60\u0170")
        buf.write("\n\60\3\60\3\60\3\u016a\2\61\3\3\5\4\7\5\t\6\13\7\r\b")
        buf.write("\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22")
        buf.write("#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35")
        buf.write("9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61\3\2")
        buf.write("\t\5\2C\\aac|\6\2\62;C\\aac|\4\2))^^\4\2$$^^\3\2\62;\5")
        buf.write("\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u017e\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2")
        buf.write("W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2")
        buf.write("\3a\3\2\2\2\5h\3\2\2\2\7j\3\2\2\2\tl\3\2\2\2\13q\3\2\2")
        buf.write("\2\r{\3\2\2\2\17\u0084\3\2\2\2\21\u0091\3\2\2\2\23\u009e")
        buf.write("\3\2\2\2\25\u00a0\3\2\2\2\27\u00a2\3\2\2\2\31\u00a4\3")
        buf.write("\2\2\2\33\u00a6\3\2\2\2\35\u00ab\3\2\2\2\37\u00af\3\2")
        buf.write("\2\2!\u00b3\3\2\2\2#\u00b6\3\2\2\2%\u00b8\3\2\2\2\'\u00bb")
        buf.write("\3\2\2\2)\u00be\3\2\2\2+\u00c0\3\2\2\2-\u00c2\3\2\2\2")
        buf.write("/\u00c6\3\2\2\2\61\u00ca\3\2\2\2\63\u00d7\3\2\2\2\65\u00e3")
        buf.write("\3\2\2\2\67\u00e5\3\2\2\29\u00e7\3\2\2\2;\u00e9\3\2\2")
        buf.write("\2=\u00eb\3\2\2\2?\u00ed\3\2\2\2A\u00ef\3\2\2\2C\u00f2")
        buf.write("\3\2\2\2E\u0101\3\2\2\2G\u0108\3\2\2\2I\u010b\3\2\2\2")
        buf.write("K\u010f\3\2\2\2M\u0113\3\2\2\2O\u011a\3\2\2\2Q\u0122\3")
        buf.write("\2\2\2S\u0133\3\2\2\2U\u0145\3\2\2\2W\u0148\3\2\2\2Y\u014d")
        buf.write("\3\2\2\2[\u0153\3\2\2\2]\u0155\3\2\2\2_\u016f\3\2\2\2")
        buf.write("ab\7o\2\2bc\7q\2\2cd\7f\2\2de\7w\2\2ef\7n\2\2fg\7g\2\2")
        buf.write("g\4\3\2\2\2hi\7}\2\2i\6\3\2\2\2jk\7\177\2\2k\b\3\2\2\2")
        buf.write("lm\7v\2\2mn\7{\2\2no\7r\2\2op\7g\2\2p\n\3\2\2\2qr\7U\2")
        buf.write("\2rs\7{\2\2st\7o\2\2tu\7o\2\2uv\7g\2\2vw\7v\2\2wx\7t\2")
        buf.write("\2xy\7k\2\2yz\7e\2\2z\f\3\2\2\2{|\7u\2\2|}\7{\2\2}~\7")
        buf.write("o\2\2~\177\7o\2\2\177\u0080\7g\2\2\u0080\u0081\7v\2\2")
        buf.write("\u0081\u0082\7k\2\2\u0082\u0083\7e\2\2\u0083\16\3\2\2")
        buf.write("\2\u0084\u0085\7p\2\2\u0085\u0086\7q\2\2\u0086\u0087\7")
        buf.write("p\2\2\u0087\u0088\7/\2\2\u0088\u0089\7u\2\2\u0089\u008a")
        buf.write("\7{\2\2\u008a\u008b\7o\2\2\u008b\u008c\7o\2\2\u008c\u008d")
        buf.write("\7g\2\2\u008d\u008e\7v\2\2\u008e\u008f\7k\2\2\u008f\u0090")
        buf.write("\7e\2\2\u0090\20\3\2\2\2\u0091\u0092\7P\2\2\u0092\u0093")
        buf.write("\7q\2\2\u0093\u0094\7p\2\2\u0094\u0095\7/\2\2\u0095\u0096")
        buf.write("\7U\2\2\u0096\u0097\7{\2\2\u0097\u0098\7o\2\2\u0098\u0099")
        buf.write("\7o\2\2\u0099\u009a\7g\2\2\u009a\u009b\7v\2\2\u009b\u009c")
        buf.write("\7k\2\2\u009c\u009d\7e\2\2\u009d\22\3\2\2\2\u009e\u009f")
        buf.write("\7]\2\2\u009f\24\3\2\2\2\u00a0\u00a1\7_\2\2\u00a1\26\3")
        buf.write("\2\2\2\u00a2\u00a3\7*\2\2\u00a3\30\3\2\2\2\u00a4\u00a5")
        buf.write("\7+\2\2\u00a5\32\3\2\2\2\u00a6\u00a7\7t\2\2\u00a7\u00a8")
        buf.write("\7w\2\2\u00a8\u00a9\7n\2\2\u00a9\u00aa\7g\2\2\u00aa\34")
        buf.write("\3\2\2\2\u00ab\u00ac\7u\2\2\u00ac\u00ad\7w\2\2\u00ad\u00ae")
        buf.write("\7d\2\2\u00ae\36\3\2\2\2\u00af\u00b0\7p\2\2\u00b0\u00b1")
        buf.write("\7c\2\2\u00b1\u00b2\7e\2\2\u00b2 \3\2\2\2\u00b3\u00b4")
        buf.write("\7c\2\2\u00b4\u00b5\7e\2\2\u00b5\"\3\2\2\2\u00b6\u00b7")
        buf.write("\7?\2\2\u00b7$\3\2\2\2\u00b8\u00b9\7?\2\2\u00b9\u00ba")
        buf.write("\7?\2\2\u00ba&\3\2\2\2\u00bb\u00bc\7/\2\2\u00bc\u00bd")
        buf.write("\7@\2\2\u00bd(\3\2\2\2\u00be\u00bf\7\60\2\2\u00bf*\3\2")
        buf.write("\2\2\u00c0\u00c1\7=\2\2\u00c1,\3\2\2\2\u00c2\u00c3\7c")
        buf.write("\2\2\u00c3\u00c4\7f\2\2\u00c4\u00c5\7f\2\2\u00c5.\3\2")
        buf.write("\2\2\u00c6\u00c7\7f\2\2\u00c7\u00c8\7g\2\2\u00c8\u00c9")
        buf.write("\7n\2\2\u00c9\60\3\2\2\2\u00ca\u00cb\7t\2\2\u00cb\u00cc")
        buf.write("\7w\2\2\u00cc\u00cd\7n\2\2\u00cd\u00ce\7g\2\2\u00ce\u00cf")
        buf.write("\7u\2\2\u00cf\u00d0\7g\2\2\u00d0\u00d1\7s\2\2\u00d1\u00d2")
        buf.write("\7w\2\2\u00d2\u00d3\7g\2\2\u00d3\u00d4\7p\2\2\u00d4\u00d5")
        buf.write("\7e\2\2\u00d5\u00d6\7g\2\2\u00d6\62\3\2\2\2\u00d7\u00d8")
        buf.write("\7u\2\2\u00d8\u00d9\7w\2\2\u00d9\u00da\7d\2\2\u00da\u00db")
        buf.write("\7u\2\2\u00db\u00dc\7g\2\2\u00dc\u00dd\7s\2\2\u00dd\u00de")
        buf.write("\7w\2\2\u00de\u00df\7g\2\2\u00df\u00e0\7p\2\2\u00e0\u00e1")
        buf.write("\7e\2\2\u00e1\u00e2\7g\2\2\u00e2\64\3\2\2\2\u00e3\u00e4")
        buf.write("\7,\2\2\u00e4\66\3\2\2\2\u00e5\u00e6\7-\2\2\u00e68\3\2")
        buf.write("\2\2\u00e7\u00e8\7/\2\2\u00e8:\3\2\2\2\u00e9\u00ea\7\61")
        buf.write("\2\2\u00ea<\3\2\2\2\u00eb\u00ec\7>\2\2\u00ec>\3\2\2\2")
        buf.write("\u00ed\u00ee\7@\2\2\u00ee@\3\2\2\2\u00ef\u00f0\7#\2\2")
        buf.write("\u00f0\u00f1\7?\2\2\u00f1B\3\2\2\2\u00f2\u00f3\7d\2\2")
        buf.write("\u00f3\u00f4\7k\2\2\u00f4\u00f5\7p\2\2\u00f5\u00f6\7u")
        buf.write("\2\2\u00f6\u00f7\7v\2\2\u00f7\u00f8\7t\2\2\u00f8\u00f9")
        buf.write("\7\64\2\2\u00f9\u00fa\7k\2\2\u00fa\u00fb\7p\2\2\u00fb")
        buf.write("\u00fc\7v\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\7*\2\2\u00fe")
        buf.write("\u00ff\5S*\2\u00ff\u0100\7+\2\2\u0100D\3\2\2\2\u0101\u0102")
        buf.write("\7f\2\2\u0102\u0103\7g\2\2\u0103\u0104\7h\2\2\u0104\u0105")
        buf.write("\7k\2\2\u0105\u0106\7p\2\2\u0106\u0107\7g\2\2\u0107F\3")
        buf.write("\2\2\2\u0108\u0109\7k\2\2\u0109\u010a\7p\2\2\u010aH\3")
        buf.write("\2\2\2\u010b\u010c\7q\2\2\u010c\u010d\7w\2\2\u010d\u010e")
        buf.write("\7v\2\2\u010eJ\3\2\2\2\u010f\u0110\7k\2\2\u0110\u0111")
        buf.write("\7p\2\2\u0111\u0112\7v\2\2\u0112L\3\2\2\2\u0113\u0114")
        buf.write("\7U\2\2\u0114\u0115\7v\2\2\u0115\u0116\7t\2\2\u0116\u0117")
        buf.write("\7k\2\2\u0117\u0118\7p\2\2\u0118\u0119\7i\2\2\u0119N\3")
        buf.write("\2\2\2\u011a\u011b\7d\2\2\u011b\u011c\7q\2\2\u011c\u011d")
        buf.write("\7q\2\2\u011d\u011e\7n\2\2\u011e\u011f\7g\2\2\u011f\u0120")
        buf.write("\7c\2\2\u0120\u0121\7p\2\2\u0121P\3\2\2\2\u0122\u0123")
        buf.write("\7h\2\2\u0123\u0124\7n\2\2\u0124\u0125\7q\2\2\u0125\u0126")
        buf.write("\7c\2\2\u0126\u0127\7v\2\2\u0127R\3\2\2\2\u0128\u012a")
        buf.write("\t\2\2\2\u0129\u012b\t\3\2\2\u012a\u0129\3\2\2\2\u012b")
        buf.write("\u012c\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012d\3\2\2\2")
        buf.write("\u012d\u0134\3\2\2\2\u012e\u0130\t\2\2\2\u012f\u012e\3")
        buf.write("\2\2\2\u0130\u0131\3\2\2\2\u0131\u012f\3\2\2\2\u0131\u0132")
        buf.write("\3\2\2\2\u0132\u0134\3\2\2\2\u0133\u0128\3\2\2\2\u0133")
        buf.write("\u012f\3\2\2\2\u0134T\3\2\2\2\u0135\u0139\7)\2\2\u0136")
        buf.write("\u0138\n\4\2\2\u0137\u0136\3\2\2\2\u0138\u013b\3\2\2\2")
        buf.write("\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c\3")
        buf.write("\2\2\2\u013b\u0139\3\2\2\2\u013c\u0146\7)\2\2\u013d\u0141")
        buf.write("\7$\2\2\u013e\u0140\n\5\2\2\u013f\u013e\3\2\2\2\u0140")
        buf.write("\u0143\3\2\2\2\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0144\3\2\2\2\u0143\u0141\3\2\2\2\u0144\u0146\7")
        buf.write("$\2\2\u0145\u0135\3\2\2\2\u0145\u013d\3\2\2\2\u0146V\3")
        buf.write("\2\2\2\u0147\u0149\t\6\2\2\u0148\u0147\3\2\2\2\u0149\u014a")
        buf.write("\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("X\3\2\2\2\u014c\u014e\t\7\2\2\u014d\u014c\3\2\2\2\u014e")
        buf.write("\u014f\3\2\2\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2")
        buf.write("\u0150\u0151\3\2\2\2\u0151\u0152\b-\2\2\u0152Z\3\2\2\2")
        buf.write("\u0153\u0154\7<\2\2\u0154\\\3\2\2\2\u0155\u0156\7.\2\2")
        buf.write("\u0156^\3\2\2\2\u0157\u0158\7\61\2\2\u0158\u0159\7\61")
        buf.write("\2\2\u0159\u015d\3\2\2\2\u015a\u015c\n\b\2\2\u015b\u015a")
        buf.write("\3\2\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015d")
        buf.write("\u015e\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3\2\2\2")
        buf.write("\u0160\u0162\7\17\2\2\u0161\u0160\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0170\7\f\2\2\u0164")
        buf.write("\u0165\7\61\2\2\u0165\u0166\7,\2\2\u0166\u016a\3\2\2\2")
        buf.write("\u0167\u0169\13\2\2\2\u0168\u0167\3\2\2\2\u0169\u016c")
        buf.write("\3\2\2\2\u016a\u016b\3\2\2\2\u016a\u0168\3\2\2\2\u016b")
        buf.write("\u016d\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u016e\7,\2\2")
        buf.write("\u016e\u0170\7\61\2\2\u016f\u0157\3\2\2\2\u016f\u0164")
        buf.write("\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172\b\60\2\2\u0172")
        buf.write("`\3\2\2\2\17\2\u012c\u0131\u0133\u0139\u0141\u0145\u014a")
        buf.write("\u014f\u015d\u0161\u016a\u016f\3\b\2\2")
        return buf.getvalue()


class AGLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    Binstr2int = 33
    DEFINE = 34
    IN = 35
    OUT = 36
    INT = 37
    STRING = 38
    BOOLEAN = 39
    FLOAT = 40
    ID = 41
    STRING_Note = 42
    NUM = 43
    WS = 44
    COLON = 45
    COMMA = 46
    COMMENT = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'module'", "'{'", "'}'", "'type'", "'Symmetric'", "'symmetic'", 
            "'non-symmetic'", "'Non-Symmetic'", "'['", "']'", "'('", "')'", 
            "'rule'", "'sub'", "'nac'", "'ac'", "'='", "'=='", "'->'", "'.'", 
            "';'", "'add'", "'del'", "'rulesequence'", "'subsequence'", 
            "'*'", "'+'", "'-'", "'/'", "'<'", "'>'", "'!='", "'define'", 
            "'in'", "'out'", "'int'", "'String'", "'boolean'", "'float'", 
            "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "Binstr2int", "DEFINE", "IN", "OUT", "INT", "STRING", "BOOLEAN", 
            "FLOAT", "ID", "STRING_Note", "NUM", "WS", "COLON", "COMMA", 
            "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "Binstr2int", "DEFINE", "IN", "OUT", "INT", "STRING", 
                  "BOOLEAN", "FLOAT", "ID", "STRING_Note", "NUM", "WS", 
                  "COLON", "COMMA", "COMMENT" ]

    grammarFileName = "AGL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


