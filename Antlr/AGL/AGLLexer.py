# Generated from .\AGL.g4 by ANTLR 4.9.3
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62")
        buf.write("\u0180\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\37\3\37\3 \3 \3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#")
        buf.write("\3#\3#\5#\u010d\n#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3&\3")
        buf.write("&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)")
        buf.write("\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\6+\u0138\n+\r")
        buf.write("+\16+\u0139\3+\6+\u013d\n+\r+\16+\u013e\5+\u0141\n+\3")
        buf.write(",\3,\7,\u0145\n,\f,\16,\u0148\13,\3,\3,\3,\7,\u014d\n")
        buf.write(",\f,\16,\u0150\13,\3,\5,\u0153\n,\3-\6-\u0156\n-\r-\16")
        buf.write("-\u0157\3.\6.\u015b\n.\r.\16.\u015c\3.\3.\3/\3/\3\60\3")
        buf.write("\60\3\61\3\61\3\61\3\61\7\61\u0169\n\61\f\61\16\61\u016c")
        buf.write("\13\61\3\61\5\61\u016f\n\61\3\61\3\61\3\61\3\61\3\61\7")
        buf.write("\61\u0176\n\61\f\61\16\61\u0179\13\61\3\61\3\61\5\61\u017d")
        buf.write("\n\61\3\61\3\61\3\u0177\2\62\3\3\5\4\7\5\t\6\13\7\r\b")
        buf.write("\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22")
        buf.write("#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35")
        buf.write("9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62")
        buf.write("\3\2\t\5\2C\\aac|\6\2\62;C\\aac|\4\2))^^\4\2$$^^\3\2\62")
        buf.write(";\5\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u018c\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2")
        buf.write("C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2")
        buf.write("\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2")
        buf.write("\2\2\2a\3\2\2\2\3c\3\2\2\2\5j\3\2\2\2\7l\3\2\2\2\tn\3")
        buf.write("\2\2\2\13s\3\2\2\2\r}\3\2\2\2\17\u0086\3\2\2\2\21\u0093")
        buf.write("\3\2\2\2\23\u00a0\3\2\2\2\25\u00a2\3\2\2\2\27\u00a4\3")
        buf.write("\2\2\2\31\u00a6\3\2\2\2\33\u00a8\3\2\2\2\35\u00ad\3\2")
        buf.write("\2\2\37\u00b1\3\2\2\2!\u00b5\3\2\2\2#\u00b8\3\2\2\2%\u00ba")
        buf.write("\3\2\2\2\'\u00bd\3\2\2\2)\u00c0\3\2\2\2+\u00c2\3\2\2\2")
        buf.write("-\u00c4\3\2\2\2/\u00c8\3\2\2\2\61\u00cc\3\2\2\2\63\u00d9")
        buf.write("\3\2\2\2\65\u00e5\3\2\2\2\67\u00e7\3\2\2\29\u00e9\3\2")
        buf.write("\2\2;\u00eb\3\2\2\2=\u00ed\3\2\2\2?\u00ef\3\2\2\2A\u00f1")
        buf.write("\3\2\2\2C\u00f4\3\2\2\2E\u010c\3\2\2\2G\u010e\3\2\2\2")
        buf.write("I\u0115\3\2\2\2K\u0118\3\2\2\2M\u011c\3\2\2\2O\u0120\3")
        buf.write("\2\2\2Q\u0127\3\2\2\2S\u012f\3\2\2\2U\u0140\3\2\2\2W\u0152")
        buf.write("\3\2\2\2Y\u0155\3\2\2\2[\u015a\3\2\2\2]\u0160\3\2\2\2")
        buf.write("_\u0162\3\2\2\2a\u017c\3\2\2\2cd\7o\2\2de\7q\2\2ef\7f")
        buf.write("\2\2fg\7w\2\2gh\7n\2\2hi\7g\2\2i\4\3\2\2\2jk\7}\2\2k\6")
        buf.write("\3\2\2\2lm\7\177\2\2m\b\3\2\2\2no\7v\2\2op\7{\2\2pq\7")
        buf.write("r\2\2qr\7g\2\2r\n\3\2\2\2st\7U\2\2tu\7{\2\2uv\7o\2\2v")
        buf.write("w\7o\2\2wx\7g\2\2xy\7v\2\2yz\7t\2\2z{\7k\2\2{|\7e\2\2")
        buf.write("|\f\3\2\2\2}~\7u\2\2~\177\7{\2\2\177\u0080\7o\2\2\u0080")
        buf.write("\u0081\7o\2\2\u0081\u0082\7g\2\2\u0082\u0083\7v\2\2\u0083")
        buf.write("\u0084\7k\2\2\u0084\u0085\7e\2\2\u0085\16\3\2\2\2\u0086")
        buf.write("\u0087\7p\2\2\u0087\u0088\7q\2\2\u0088\u0089\7p\2\2\u0089")
        buf.write("\u008a\7/\2\2\u008a\u008b\7u\2\2\u008b\u008c\7{\2\2\u008c")
        buf.write("\u008d\7o\2\2\u008d\u008e\7o\2\2\u008e\u008f\7g\2\2\u008f")
        buf.write("\u0090\7v\2\2\u0090\u0091\7k\2\2\u0091\u0092\7e\2\2\u0092")
        buf.write("\20\3\2\2\2\u0093\u0094\7P\2\2\u0094\u0095\7q\2\2\u0095")
        buf.write("\u0096\7p\2\2\u0096\u0097\7/\2\2\u0097\u0098\7U\2\2\u0098")
        buf.write("\u0099\7{\2\2\u0099\u009a\7o\2\2\u009a\u009b\7o\2\2\u009b")
        buf.write("\u009c\7g\2\2\u009c\u009d\7v\2\2\u009d\u009e\7k\2\2\u009e")
        buf.write("\u009f\7e\2\2\u009f\22\3\2\2\2\u00a0\u00a1\7]\2\2\u00a1")
        buf.write("\24\3\2\2\2\u00a2\u00a3\7_\2\2\u00a3\26\3\2\2\2\u00a4")
        buf.write("\u00a5\7*\2\2\u00a5\30\3\2\2\2\u00a6\u00a7\7+\2\2\u00a7")
        buf.write("\32\3\2\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa\7w\2\2\u00aa")
        buf.write("\u00ab\7n\2\2\u00ab\u00ac\7g\2\2\u00ac\34\3\2\2\2\u00ad")
        buf.write("\u00ae\7u\2\2\u00ae\u00af\7w\2\2\u00af\u00b0\7d\2\2\u00b0")
        buf.write("\36\3\2\2\2\u00b1\u00b2\7p\2\2\u00b2\u00b3\7c\2\2\u00b3")
        buf.write("\u00b4\7e\2\2\u00b4 \3\2\2\2\u00b5\u00b6\7c\2\2\u00b6")
        buf.write("\u00b7\7e\2\2\u00b7\"\3\2\2\2\u00b8\u00b9\7?\2\2\u00b9")
        buf.write("$\3\2\2\2\u00ba\u00bb\7?\2\2\u00bb\u00bc\7?\2\2\u00bc")
        buf.write("&\3\2\2\2\u00bd\u00be\7/\2\2\u00be\u00bf\7@\2\2\u00bf")
        buf.write("(\3\2\2\2\u00c0\u00c1\7\60\2\2\u00c1*\3\2\2\2\u00c2\u00c3")
        buf.write("\7=\2\2\u00c3,\3\2\2\2\u00c4\u00c5\7c\2\2\u00c5\u00c6")
        buf.write("\7f\2\2\u00c6\u00c7\7f\2\2\u00c7.\3\2\2\2\u00c8\u00c9")
        buf.write("\7f\2\2\u00c9\u00ca\7g\2\2\u00ca\u00cb\7n\2\2\u00cb\60")
        buf.write("\3\2\2\2\u00cc\u00cd\7t\2\2\u00cd\u00ce\7w\2\2\u00ce\u00cf")
        buf.write("\7n\2\2\u00cf\u00d0\7g\2\2\u00d0\u00d1\7u\2\2\u00d1\u00d2")
        buf.write("\7g\2\2\u00d2\u00d3\7s\2\2\u00d3\u00d4\7w\2\2\u00d4\u00d5")
        buf.write("\7g\2\2\u00d5\u00d6\7p\2\2\u00d6\u00d7\7e\2\2\u00d7\u00d8")
        buf.write("\7g\2\2\u00d8\62\3\2\2\2\u00d9\u00da\7u\2\2\u00da\u00db")
        buf.write("\7w\2\2\u00db\u00dc\7d\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de")
        buf.write("\7g\2\2\u00de\u00df\7s\2\2\u00df\u00e0\7w\2\2\u00e0\u00e1")
        buf.write("\7g\2\2\u00e1\u00e2\7p\2\2\u00e2\u00e3\7e\2\2\u00e3\u00e4")
        buf.write("\7g\2\2\u00e4\64\3\2\2\2\u00e5\u00e6\7,\2\2\u00e6\66\3")
        buf.write("\2\2\2\u00e7\u00e8\7-\2\2\u00e88\3\2\2\2\u00e9\u00ea\7")
        buf.write("/\2\2\u00ea:\3\2\2\2\u00eb\u00ec\7\61\2\2\u00ec<\3\2\2")
        buf.write("\2\u00ed\u00ee\7>\2\2\u00ee>\3\2\2\2\u00ef\u00f0\7@\2")
        buf.write("\2\u00f0@\3\2\2\2\u00f1\u00f2\7#\2\2\u00f2\u00f3\7?\2")
        buf.write("\2\u00f3B\3\2\2\2\u00f4\u00f5\7d\2\2\u00f5\u00f6\7k\2")
        buf.write("\2\u00f6\u00f7\7p\2\2\u00f7\u00f8\7u\2\2\u00f8\u00f9\7")
        buf.write("v\2\2\u00f9\u00fa\7t\2\2\u00fa\u00fb\7\64\2\2\u00fb\u00fc")
        buf.write("\7k\2\2\u00fc\u00fd\7p\2\2\u00fd\u00fe\7v\2\2\u00fe\u00ff")
        buf.write("\3\2\2\2\u00ff\u0100\7*\2\2\u0100\u0101\5U+\2\u0101\u0102")
        buf.write("\7+\2\2\u0102D\3\2\2\2\u0103\u0104\7V\2\2\u0104\u0105")
        buf.write("\7t\2\2\u0105\u0106\7w\2\2\u0106\u010d\7g\2\2\u0107\u0108")
        buf.write("\7H\2\2\u0108\u0109\7c\2\2\u0109\u010a\7n\2\2\u010a\u010b")
        buf.write("\7u\2\2\u010b\u010d\7g\2\2\u010c\u0103\3\2\2\2\u010c\u0107")
        buf.write("\3\2\2\2\u010dF\3\2\2\2\u010e\u010f\7f\2\2\u010f\u0110")
        buf.write("\7g\2\2\u0110\u0111\7h\2\2\u0111\u0112\7k\2\2\u0112\u0113")
        buf.write("\7p\2\2\u0113\u0114\7g\2\2\u0114H\3\2\2\2\u0115\u0116")
        buf.write("\7k\2\2\u0116\u0117\7p\2\2\u0117J\3\2\2\2\u0118\u0119")
        buf.write("\7q\2\2\u0119\u011a\7w\2\2\u011a\u011b\7v\2\2\u011bL\3")
        buf.write("\2\2\2\u011c\u011d\7k\2\2\u011d\u011e\7p\2\2\u011e\u011f")
        buf.write("\7v\2\2\u011fN\3\2\2\2\u0120\u0121\7U\2\2\u0121\u0122")
        buf.write("\7v\2\2\u0122\u0123\7t\2\2\u0123\u0124\7k\2\2\u0124\u0125")
        buf.write("\7p\2\2\u0125\u0126\7i\2\2\u0126P\3\2\2\2\u0127\u0128")
        buf.write("\7d\2\2\u0128\u0129\7q\2\2\u0129\u012a\7q\2\2\u012a\u012b")
        buf.write("\7n\2\2\u012b\u012c\7g\2\2\u012c\u012d\7c\2\2\u012d\u012e")
        buf.write("\7p\2\2\u012eR\3\2\2\2\u012f\u0130\7h\2\2\u0130\u0131")
        buf.write("\7n\2\2\u0131\u0132\7q\2\2\u0132\u0133\7c\2\2\u0133\u0134")
        buf.write("\7v\2\2\u0134T\3\2\2\2\u0135\u0137\t\2\2\2\u0136\u0138")
        buf.write("\t\3\2\2\u0137\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139")
        buf.write("\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u0141\3\2\2\2")
        buf.write("\u013b\u013d\t\2\2\2\u013c\u013b\3\2\2\2\u013d\u013e\3")
        buf.write("\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0141")
        buf.write("\3\2\2\2\u0140\u0135\3\2\2\2\u0140\u013c\3\2\2\2\u0141")
        buf.write("V\3\2\2\2\u0142\u0146\7)\2\2\u0143\u0145\n\4\2\2\u0144")
        buf.write("\u0143\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2")
        buf.write("\u0146\u0147\3\2\2\2\u0147\u0149\3\2\2\2\u0148\u0146\3")
        buf.write("\2\2\2\u0149\u0153\7)\2\2\u014a\u014e\7$\2\2\u014b\u014d")
        buf.write("\n\5\2\2\u014c\u014b\3\2\2\2\u014d\u0150\3\2\2\2\u014e")
        buf.write("\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0151\3\2\2\2")
        buf.write("\u0150\u014e\3\2\2\2\u0151\u0153\7$\2\2\u0152\u0142\3")
        buf.write("\2\2\2\u0152\u014a\3\2\2\2\u0153X\3\2\2\2\u0154\u0156")
        buf.write("\t\6\2\2\u0155\u0154\3\2\2\2\u0156\u0157\3\2\2\2\u0157")
        buf.write("\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158Z\3\2\2\2\u0159")
        buf.write("\u015b\t\7\2\2\u015a\u0159\3\2\2\2\u015b\u015c\3\2\2\2")
        buf.write("\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015e\3")
        buf.write("\2\2\2\u015e\u015f\b.\2\2\u015f\\\3\2\2\2\u0160\u0161")
        buf.write("\7<\2\2\u0161^\3\2\2\2\u0162\u0163\7.\2\2\u0163`\3\2\2")
        buf.write("\2\u0164\u0165\7\61\2\2\u0165\u0166\7\61\2\2\u0166\u016a")
        buf.write("\3\2\2\2\u0167\u0169\n\b\2\2\u0168\u0167\3\2\2\2\u0169")
        buf.write("\u016c\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2")
        buf.write("\u016b\u016e\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u016f\7")
        buf.write("\17\2\2\u016e\u016d\3\2\2\2\u016e\u016f\3\2\2\2\u016f")
        buf.write("\u0170\3\2\2\2\u0170\u017d\7\f\2\2\u0171\u0172\7\61\2")
        buf.write("\2\u0172\u0173\7,\2\2\u0173\u0177\3\2\2\2\u0174\u0176")
        buf.write("\13\2\2\2\u0175\u0174\3\2\2\2\u0176\u0179\3\2\2\2\u0177")
        buf.write("\u0178\3\2\2\2\u0177\u0175\3\2\2\2\u0178\u017a\3\2\2\2")
        buf.write("\u0179\u0177\3\2\2\2\u017a\u017b\7,\2\2\u017b\u017d\7")
        buf.write("\61\2\2\u017c\u0164\3\2\2\2\u017c\u0171\3\2\2\2\u017d")
        buf.write("\u017e\3\2\2\2\u017e\u017f\b\61\2\2\u017fb\3\2\2\2\20")
        buf.write("\2\u010c\u0139\u013e\u0140\u0146\u014e\u0152\u0157\u015c")
        buf.write("\u016a\u016e\u0177\u017c\3\b\2\2")
        return buf.getvalue()


class AGLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    Binstr2int = 33
    Boolean = 34
    DEFINE = 35
    IN = 36
    OUT = 37
    INT = 38
    STRING = 39
    BOOLEAN = 40
    FLOAT = 41
    ID = 42
    STRING_Note = 43
    NUM = 44
    WS = 45
    COLON = 46
    COMMA = 47
    COMMENT = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'module'", "'{'", "'}'", "'type'", "'Symmetric'", "'symmetic'", 
            "'non-symmetic'", "'Non-Symmetic'", "'['", "']'", "'('", "')'", 
            "'rule'", "'sub'", "'nac'", "'ac'", "'='", "'=='", "'->'", "'.'", 
            "';'", "'add'", "'del'", "'rulesequence'", "'subsequence'", 
            "'*'", "'+'", "'-'", "'/'", "'<'", "'>'", "'!='", "'define'", 
            "'in'", "'out'", "'int'", "'String'", "'boolean'", "'float'", 
            "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "Binstr2int", "Boolean", "DEFINE", "IN", "OUT", "INT", "STRING", 
            "BOOLEAN", "FLOAT", "ID", "STRING_Note", "NUM", "WS", "COLON", 
            "COMMA", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "Binstr2int", "Boolean", "DEFINE", "IN", "OUT", "INT", 
                  "STRING", "BOOLEAN", "FLOAT", "ID", "STRING_Note", "NUM", 
                  "WS", "COLON", "COMMA", "COMMENT" ]

    grammarFileName = "AGL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


